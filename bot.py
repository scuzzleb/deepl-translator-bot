import logging
import requests
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, ContextTypes, filters

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TELEGRAM_BOT_TOKEN = "7604760601:AAELL1UilnhovMnjJdskoC1Qhx35FtKN-zI"
DEEPL_API_KEY = "354a537f-a56a-44c8-88f1-0b19cb13917b:fx"

logging.basicConfig(level=logging.INFO)

# === –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ (–∞–Ω–≥–ª ‚áÑ —è–ø–æ–Ω—Å–∫–∏–π) ===
def detect_target_lang(text):
    for ch in text:
        if '\u3040' <= ch <= '\u30ff' or '\u4e00' <= ch <= '\u9faf':
            return "EN"  # –µ—Å–ª–∏ —è–ø–æ–Ω—Å–∫–∏–π ‚Äî –ø–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
    return "JA"  # –∏–Ω–∞—á–µ ‚Äî –Ω–∞ —è–ø–æ–Ω—Å–∫–∏–π

# === –û—á–∏—Å—Ç–∫–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ ===
def preprocess_text(text):
    text = " ".join(text.strip().split())  # —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    if not text.endswith((".", "!", "?", "„ÄÇ", "ÔºÅ", "Ôºü")):
        text += "."  # –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É, —á—Ç–æ–±—ã DeepL –Ω–µ —Å—á–∏—Ç–∞–ª —Ç–µ–∫—Å—Ç –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–º
    return text

# === –ü–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ DeepL ===
def translate_with_deepl(text: str) -> str:
    text = preprocess_text(text)
    target_lang = detect_target_lang(text)

    url = "https://api-free.deepl.com/v2/translate"
    params = {
        "auth_key": DEEPL_API_KEY,
        "text": text,
        "target_lang": target_lang,
        "split_sentences": "0",            # –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∫–∞–∫ –æ–¥–Ω–æ —Ü–µ–ª–æ–µ
        "preserve_formatting": "1",        # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç
        "formality": "more"                # –±–æ–ª–µ–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π/–¥–æ—Å–ª–æ–≤–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥
    }

    response = requests.post(url, data=params)
    if response.status_code == 200:
        return response.json()["translations"][0]["text"]
    else:
        return f"[–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {response.text}]"

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ===
async def handle_all_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    if not message or not message.text:
        return

    text = message.text.strip()
    if text.startswith("/"):  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
        return

    translation = translate_with_deepl(text)
    await message.reply_text(translation)

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT, handle_all_text))
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å —Ä–µ–∂–∏–º–æ–º –¥–æ—Å–ª–æ–≤–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ (DeepL)")
    app.run_polling()
