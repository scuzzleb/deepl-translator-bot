import logging
import os
import requests
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, ContextTypes, filters

# === –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
DEEPL_API_KEY = os.getenv("DEEPL_API_KEY")

# === –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω—ã –Ω–µ –∑–∞–¥–∞–Ω—ã ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø—É—Å–∫
if not TELEGRAM_BOT_TOKEN or not DEEPL_API_KEY:
    raise ValueError("‚ùóÔ∏è TELEGRAM_BOT_TOKEN –∏ DEEPL_API_KEY –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# === –Ø–∑—ã–∫: –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
def detect_target_lang(text):
    for ch in text:
        if '\u3040' <= ch <= '\u30ff' or '\u4e00' <= ch <= '\u9faf':
            return "EN"  # –µ—Å–ª–∏ —è–ø–æ–Ω—Å–∫–∏–π ‚Äî –ø–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
    return "JA"  # –∏–Ω–∞—á–µ ‚Äî –Ω–∞ —è–ø–æ–Ω—Å–∫–∏–π

# === –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞
def preprocess_text(text):
    text = " ".join(text.strip().split())  # —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    if not text.endswith((".", "!", "?", "„ÄÇ", "ÔºÅ", "Ôºü")):
        text += "."
    return text

# === –ü–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ DeepL
def translate_with_deepl(text: str) -> str:
    text = preprocess_text(text)
    target_lang = detect_target_lang(text)

    url = "https://api-free.deepl.com/v2/translate"
    params = {
        "auth_key": DEEPL_API_KEY,
        "text": text,
        "target_lang": target_lang,
        "split_sentences": "0",
        "preserve_formatting": "1",
        "formality": "more"
    }

    response = requests.post(url, data=params)
    if response.status_code == 200:
        return response.json()["translations"][0]["text"]
    else:
        return f"[–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {response.text}]"

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_all_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    if not message or not message.text:
        return

    text = message.text.strip()
    if text.startswith("/"):  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
        return

    translation = translate_with_deepl(text)
    await message.reply_text(translation)

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT, handle_all_text))
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –¥–æ—Å–ª–æ–≤–Ω—ã–º –ø–µ—Ä–µ–≤–æ–¥–æ–º")
    app.run_polling()
